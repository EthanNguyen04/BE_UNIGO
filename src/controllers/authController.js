const nodemailer = require("nodemailer");
const User = require("../models/userModel");
const bcrypt = require("bcrypt");
const crypto = require("crypto"); // D√πng ƒë·ªÉ sinh OTP b·∫£o m·∫≠t h∆°n
require("dotenv").config();

// C·∫•u h√¨nh SMTP
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,  // ƒê√∫ng bi·∫øn m√¥i tr∆∞·ªùng
        pass: process.env.EMAIL_PASS
    },
    tls: { rejectUnauthorized: false }
});

// H√†m t·∫°o OTP ng·∫´u nhi√™n 4 s·ªë
const generateOTP = () => crypto.randomInt(1000, 9999).toString();

// H√†m g·ª≠i OTP qua email
exports.sendOtpEmail = async (toEmail, otp) => {
    const mailOptions = {
        from: process.env.MAIL,
        to: toEmail,
        subject: 'M√£ OTP x√°c nh·∫≠n c·ªßa b·∫°n',
        text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y c√≥ hi·ªáu l·ª±c trong 60 gi√¢y.`
    };

    try {
        await transporter.sendMail(mailOptions);
        console.log(`OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email: ${toEmail}`);
    } catch (error) {
        console.error(`L·ªói khi g·ª≠i email OTP: ${error}`);
        throw new Error('Kh√¥ng th·ªÉ g·ª≠i OTP qua email');
    }
};

// G·ª≠i OTP
exports.sendOTP = async (req, res) => {
    try {
        const { email, type } = req.body; // üÜï Nh·∫≠n type t·ª´ request
        if (!email || !type) {
            return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c lo·∫°i OTP" });
        }
        if (!["register", "reset_password"].includes(type)) {
            return res.status(400).json({ message: "Lo·∫°i OTP kh√¥ng h·ª£p l·ªá!" });
        }

        let user = await User.findOne({ email });
        if (type === "register" && user) {
            return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!" });
        }
        if (type === "reset_password" && !user) {
            return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
        }

        // N·∫øu l√† ƒëƒÉng k√Ω, t·∫°o t√†i kho·∫£n nh∆∞ng ch∆∞a k√≠ch ho·∫°t
        if (!user) {
            user = new User({ email, isActive: false });
        }

        const otp = generateOTP();
        const hashedOTP = await bcrypt.hash(otp, 10);

        // C·∫≠p nh·∫≠t OTP v√†o DB
        user.otp = hashedOTP;
        user.otpExpiresAt = new Date(Date.now() + 60000);
        user.otp_type = type;
        await user.save();

        await exports.sendOtpEmail(email, otp);
        res.status(200).json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!" });

    } catch (error) {
        res.status(500).json({ message: "L·ªói server khi g·ª≠i OTP!" });
    }
};


// X√°c th·ª±c OTP
exports.verifyOTP = async (req, res) => {
    try {
        const { email, otpInput, type } = req.body;
        if (!email || !otpInput || !type) {
            return res.status(400).json({ message: "Thi·∫øu th√¥ng tin" });
        }

        const user = await User.findOne({ email });
        if (!user || !user.otp || !user.otpExpiresAt || user.otp_type !== type) {
            return res.status(400).json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë√∫ng lo·∫°i!" });
        }

        if (Date.now() > user.otpExpiresAt) {
            await User.findByIdAndUpdate(user._id, { otp: null, otpExpiresAt: null, otp_verified: false });
            return res.status(400).json({ message: "OTP ƒë√£ h·∫øt h·∫°n!" });
        }

        const isMatch = await bcrypt.compare(otpInput.toString(), user.otp);
        if (!isMatch) {
            return res.status(400).json({ message: "M√£ OTP kh√¥ng ƒë√∫ng!" });
        }

        // N·∫øu l√† ƒëƒÉng k√Ω, k√≠ch ho·∫°t t√†i kho·∫£n
        if (type === "register") {
            user.isActive = true;
        }

        //  N·∫øu l√† qu√™n m·∫≠t kh·∫©u, ch·ªâ ƒë√°nh d·∫•u x√°c th·ª±c
        user.otp = null;
        user.otpExpiresAt = null;
        user.otp_verified = true;
        await user.save();

        res.status(200).json({ message: "X√°c th·ª±c OTP th√†nh c√¥ng!" });

    } catch (error) {
        res.status(500).json({ message: "L·ªói server khi x√°c th·ª±c OTP!" });
    }
};



exports.changePassword = async (req, res) => {
    try {
        const { email, newPassword } = req.body;
        if (!email || !newPassword) {
            return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u m·ªõi" });
        }

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
        }

        //  Ki·ªÉm tra ch·ªâ cho ƒë·ªïi m·∫≠t kh·∫©u n·∫øu ƒë√£ x√°c minh OTP v√† OTP l√† lo·∫°i "reset_password"
        if (!user.otp_verified || user.otp_type !== "reset_password") {
            return res.status(403).json({ message: "B·∫°n ch∆∞a x√°c th·ª±c OTP ho·∫∑c OTP kh√¥ng h·ª£p l·ªá!" });
        }

        const hashedPassword = await bcrypt.hash(newPassword, 10);

        //  C·∫≠p nh·∫≠t m·∫≠t kh·∫©u & reset tr·∫°ng th√°i OTP
        user.password = hashedPassword;
        user.otp_verified = false;
        user.otp_type = null;
        await user.save();

        res.status(200).json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server khi ƒë·ªïi m·∫≠t kh·∫©u!" });
    }
};
